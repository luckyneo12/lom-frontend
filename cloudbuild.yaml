# steps:
#   # Step 1: Delete existing frontend folder on the VM
#   - name: 'gcr.io/cloud-builders/gcloud'
#     entrypoint: 'bash'
#     args:
#       - '-c'
#       - |
#         echo 'üóëÔ∏è [STEP 1] Deleting old frontend folder on the VM...'
#         gcloud compute ssh ${_INSTANCE_USER}@${_INSTANCE_NAME} --zone=${_ZONE} --command="rm -rf /home/${_INSTANCE_USER}/${_FRONTEND_FOLDER}"

#   # Step 2: Copy Next.js app to VM
#   - name: 'gcr.io/cloud-builders/gcloud'
#     entrypoint: 'bash'
#     args:
#       - '-c'
#       - |
#         echo 'üìÇ [STEP 2] Copying local Next.js project to the VM...'
#         gcloud compute scp --recurse $(pwd) ${_INSTANCE_USER}@${_INSTANCE_NAME}:/home/${_INSTANCE_USER}/${_FRONTEND_FOLDER} --zone=${_ZONE}

#   # Step 3: Fetch secrets from Secret Manager and generate .env
#   - name: 'gcr.io/cloud-builders/gcloud'
#     entrypoint: 'bash'
#     args:
#       - '-c'
#       - |
#         echo 'üîê [STEP 3] Fetching secrets from Secret Manager...'

#         if [[ "${_ENV_TYPE}" == "production" ]]; then
#           env="prod"
#         else
#           env="dev"
#         fi

#         # Replace these with your actual secret keys
#         next_public_api_url=$(gcloud secrets versions access latest --secret="${env}-lom-next_public_api_url")

#         echo 'üßæ [INFO] Generating local .env file...'
#         {
#           echo "NEXT_PUBLIC_API_BASE_URL=$next_public_api_url"
#         } > temp.env

#         echo 'üöÄ [INFO] Transferring .env file to VM...'
#         cat temp.env
#         gcloud compute scp temp.env ${_INSTANCE_USER}@${_INSTANCE_NAME}:/home/${_INSTANCE_USER}/${_FRONTEND_FOLDER}/.env --zone=${_ZONE}
#         rm temp.env

#         echo '‚öôÔ∏è [STEP 4] Building and restarting the Next.js frontend on the VM...'
#         gcloud compute ssh ${_INSTANCE_USER}@${_INSTANCE_NAME} --zone=${_ZONE} --command="\
#           echo 'üîß [START] Navigating to frontend folder...' && \
#           cd /home/${_INSTANCE_USER}/${_FRONTEND_FOLDER} && \
#           echo 'üì¶ [START] Installing dependencies...' && \
#           npm install -f && \
#           echo '‚úÖ [DONE] Dependencies installed.' && \
#           echo 'üèóÔ∏è [START] Building the Next.js app...' && \
#           npm run build && \
#           echo '‚úÖ [DONE] Build complete.' && \
#           echo 'üöÄ [START] Starting or restarting app with PM2...' && \
#           pm2 restart lom-frontend || pm2 start npm --name lom-frontend -- start && \
#           echo '‚úÖ [DONE] App is running with PM2 as lom-frontend.'"

# options:
#   logging: CLOUD_LOGGING_ONLY

# substitutions:
#   _INSTANCE_USER: 'icreativefuel'
#   _INSTANCE_NAME: 'lom-server'
#   _ZONE: 'us-central1-a'
#   _FRONTEND_FOLDER: 'lom_frontend'
#   _ENV_TYPE: 'production'  # Change to 'development' for dev deployment


# ==================================================================================================================
# update to use the latest version of the code 27 may 2025 ( blue green deployment strategy withour health checker )

# steps:
#   # Step 1: Clean up previous NEW folder
#   - name: 'gcr.io/cloud-builders/gcloud'
#     entrypoint: 'bash'
#     args:
#       - '-c'
#       - |
#         echo 'üßπ Cleaning previous NEW build folder...'
#         gcloud compute ssh ${_INSTANCE_USER}@${_INSTANCE_NAME} --zone=${_ZONE} --command="rm -rf /home/${_INSTANCE_USER}/lom_frontend_new"

#   # Step 2: Upload the latest frontend to NEW folder
#   - name: 'gcr.io/cloud-builders/gcloud'
#     entrypoint: 'bash'
#     args:
#       - '-c'
#       - |
#         echo 'üì§ Uploading latest code to NEW folder...'
#         gcloud compute scp --recurse $(pwd) ${_INSTANCE_USER}@${_INSTANCE_NAME}:/home/${_INSTANCE_USER}/lom_frontend_new --zone=${_ZONE}

#   # Step 3: Fetch secrets and generate .env in NEW folder
#   - name: 'gcr.io/cloud-builders/gcloud'
#     entrypoint: 'bash'
#     args:
#       - '-c'
#       - |
#         echo 'üîê Fetching secrets and generating .env...'
#         if [[ "${_ENV_TYPE}" == "production" ]]; then
#           env="prod"
#         else
#           env="dev"
#         fi

#         next_public_api_url=$(gcloud secrets versions access latest --secret="${env}-lom-next_public_api_url")

#         echo "NEXT_PUBLIC_API_BASE_URL=$next_public_api_url" > temp.env

#         echo 'üöö Sending .env to NEW folder...'
#         gcloud compute scp temp.env ${_INSTANCE_USER}@${_INSTANCE_NAME}:/home/${_INSTANCE_USER}/lom_frontend_new/.env --zone=${_ZONE}
#         rm temp.env

#   # Step 4: Install dependencies and build in NEW folder
#   - name: 'gcr.io/cloud-builders/gcloud'
#     entrypoint: 'bash'
#     args:
#       - '-c'
#       - |
#         echo '‚öôÔ∏è Building project in NEW folder...'
#         gcloud compute ssh ${_INSTANCE_USER}@${_INSTANCE_NAME} --zone=${_ZONE} --command="\
#           cd /home/${_INSTANCE_USER}/lom_frontend_new && \
#           npm install -f && \
#           npm run build"

#   # Step 5: Backup current LIVE folder with timestamp (if exists)
#   - name: 'gcr.io/cloud-builders/gcloud'
#     entrypoint: 'bash'
#     args:
#       - '-c'
#       - |
#         echo 'üß∞ Backing up current LIVE folder...'
#         gcloud compute ssh ${_INSTANCE_USER}@${_INSTANCE_NAME} --zone=${_ZONE} --command="\
#           if [ -d /home/${_INSTANCE_USER}/lom_frontend_live ]; then \
#             timestamp=$(date +"%Y-%m-%d_%H-%M-%S") && \
#             mv /home/${_INSTANCE_USER}/lom_frontend_live /home/${_INSTANCE_USER}/lom_frontend_backup_\$timestamp && \
#             echo '‚úÖ Backup saved as lom_frontend_backup_\$timestamp'; \
#           else \
#             echo '‚ÑπÔ∏è No LIVE folder to backup.'; \
#           fi"

#   # Step 6: Replace LIVE with NEW and restart PM2 on port 3000
#   - name: 'gcr.io/cloud-builders/gcloud'
#     entrypoint: 'bash'
#     args:
#       - '-c'
#       - |
#         echo 'üîÅ Swapping NEW folder with LIVE and restarting PM2...'
#         gcloud compute ssh ${_INSTANCE_USER}@${_INSTANCE_NAME} --zone=${_ZONE} --command="\
#           pm2 delete lom-frontend || true && \
#           mv /home/${_INSTANCE_USER}/lom_frontend_new /home/${_INSTANCE_USER}/lom_frontend_live && \
#           cd /home/${_INSTANCE_USER}/lom_frontend_live && \
#           pm2 restart lom-frontend || PORT=3000 pm2 start npm --name lom-frontend -- start"

# options:
#   logging: CLOUD_LOGGING_ONLY

# substitutions:
#   _INSTANCE_USER: 'icreativefuel'
#   _INSTANCE_NAME: 'lom-server'
#   _ZONE: 'us-central1-a'
#   _ENV_TYPE: 'production'


# =======================================================================================================
# update on 28 may 2025 ( blue green deployment strategy with health checker )

# steps:
#   # Step 1: Clean up previous NEW folder
#   - name: 'gcr.io/cloud-builders/gcloud'
#     entrypoint: 'bash'
#     args:
#       - '-c'
#       - |
#         echo 'üßπ Cleaning previous NEW build folder...'
#         gcloud compute ssh ${_INSTANCE_USER}@${_INSTANCE_NAME} --zone=${_ZONE} --command="rm -rf /home/${_INSTANCE_USER}/lom_frontend_new"

#   # Step 2: Upload the latest frontend to NEW folder
#   - name: 'gcr.io/cloud-builders/gcloud'
#     entrypoint: 'bash'
#     args:
#       - '-c'
#       - |
#         echo 'üì§ Uploading latest code to NEW folder...'
#         gcloud compute scp --recurse $(pwd) ${_INSTANCE_USER}@${_INSTANCE_NAME}:/home/${_INSTANCE_USER}/lom_frontend_new --zone=${_ZONE}

#   # Step 3: Fetch secrets and generate .env in NEW folder
#   - name: 'gcr.io/cloud-builders/gcloud'
#     entrypoint: 'bash'
#     args:
#       - '-c'
#       - |
#         echo 'üîê Fetching secrets and generating .env...'
#         if [[ "${_ENV_TYPE}" == "production" ]]; then
#           env="prod"
#         else
#           env="dev"
#         fi

#         next_public_api_url=$(gcloud secrets versions access latest --secret="${env}-lom-next_public_api_url")

#         echo "NEXT_PUBLIC_API_BASE_URL=$next_public_api_url" > temp.env

#         echo 'üöö Sending .env to NEW folder...'
#         gcloud compute scp temp.env ${_INSTANCE_USER}@${_INSTANCE_NAME}:/home/${_INSTANCE_USER}/lom_frontend_new/.env --zone=${_ZONE}
#         rm temp.env

#   # Step 4: Install dependencies and build in NEW folder
#   - name: 'gcr.io/cloud-builders/gcloud'
#     entrypoint: 'bash'
#     args:
#       - '-c'
#       - |
#         echo '‚öôÔ∏è Building project in NEW folder...'
#         gcloud compute ssh ${_INSTANCE_USER}@${_INSTANCE_NAME} --zone=${_ZONE} --command="\
#           cd /home/${_INSTANCE_USER}/lom_frontend_new && \
#           npm install -f && \
#           npm run build"

#   # Step 5: Health check on port 3001 (temp PM2 process)
#   - name: 'gcr.io/cloud-builders/gcloud'
#     entrypoint: 'bash'
#     args:
#       - '-c'
#       - |
#         echo 'üö¶ Running health check on NEW build...'
#         gcloud compute ssh ${_INSTANCE_USER}@${_INSTANCE_NAME} --zone=${_ZONE} --command="\
#           cd /home/${_INSTANCE_USER}/lom_frontend_new && \
#           PORT=3001 pm2 start npm --name health-check-temp -- start"

#         echo '‚è≥ Waiting for app to boot...'
#         sleep 10

#         echo 'üîç Checking health endpoint...'
#         gcloud compute ssh ${_INSTANCE_USER}@${_INSTANCE_NAME} --zone=${_ZONE} --command="curl -f http://localhost:3001"
#         if [ $? -ne 0 ]; then
#           echo '‚ùå Health check failed. Stopping temp server and exiting.'
#           gcloud compute ssh ${_INSTANCE_USER}@${_INSTANCE_NAME} --zone=${_ZONE} --command="pm2 delete health-check-temp || true"
#           exit 1
#         fi

#         echo '‚úÖ Health check passed!'
#         gcloud compute ssh ${_INSTANCE_USER}@${_INSTANCE_NAME} --zone=${_ZONE} --command="pm2 delete health-check-temp || true"

#   # Step 6: Backup current LIVE folder with timestamp
#   - name: 'gcr.io/cloud-builders/gcloud'
#     entrypoint: 'bash'
#     args:
#       - '-c'
#       - |
#         echo 'üß∞ Backing up current LIVE folder...'
#         gcloud compute ssh ${_INSTANCE_USER}@${_INSTANCE_NAME} --zone=${_ZONE} --command="\
#           if [ -d /home/${_INSTANCE_USER}/lom_frontend_live ]; then \
#             timestamp=$(date +\"%Y-%m-%d_%H-%M-%S\") && \
#             mv /home/${_INSTANCE_USER}/lom_frontend_live /home/${_INSTANCE_USER}/lom_frontend_backup_\$timestamp && \
#             echo '‚úÖ Backup saved as lom_frontend_backup_\$timestamp'; \
#           else \
#             echo '‚ÑπÔ∏è No LIVE folder to backup.'; \
#           fi"

#   # Step 7: Replace LIVE with NEW and restart PM2
#   - name: 'gcr.io/cloud-builders/gcloud'
#     entrypoint: 'bash'
#     args:
#       - '-c'
#       - |
#         echo 'üîÅ Swapping NEW folder with LIVE and restarting PM2...'
#         gcloud compute ssh ${_INSTANCE_USER}@${_INSTANCE_NAME} --zone=${_ZONE} --command="\
#           pm2 delete lom-frontend || true && \
#           mv /home/${_INSTANCE_USER}/lom_frontend_new /home/${_INSTANCE_USER}/lom_frontend_live && \
#           cd /home/${_INSTANCE_USER}/lom_frontend_live && \
#           pm2 restart lom-frontend || PORT=3000 pm2 start npm --name lom-frontend -- start"

# options:
#   logging: CLOUD_LOGGING_ONLY

# substitutions:
#   _INSTANCE_USER: 'icreativefuel'
#   _INSTANCE_NAME: 'lom-server'
#   _ZONE: 'us-central1-a'
#   _ENV_TYPE: 'production'

# =========================================================================================
# Updated for error Error: ENOSPC: no space left on device, write


steps:
  # Step 1: Clean up previous NEW folder
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo 'üßπ Cleaning previous NEW build folder...'
        gcloud compute ssh ${_INSTANCE_USER}@${_INSTANCE_NAME} --zone=${_ZONE} --command="rm -rf /home/${_INSTANCE_USER}/lom_frontend_new"

  # Step 2: Upload the latest frontend to NEW folder
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo 'üì§ Uploading latest code to NEW folder...'
        gcloud compute scp --recurse $(pwd) ${_INSTANCE_USER}@${_INSTANCE_NAME}:/home/${_INSTANCE_USER}/lom_frontend_new --zone=${_ZONE}

  # Step 3: Fetch secrets and generate .env in NEW folder
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo 'üîê Fetching secrets and generating .env...'
        if [[ "${_ENV_TYPE}" == "production" ]]; then
          env="prod"
        else
          env="dev"
        fi

        next_public_api_url=$(gcloud secrets versions access latest --secret="${env}-lom-next_public_api_url")

        echo "NEXT_PUBLIC_API_BASE_URL=$next_public_api_url" > temp.env

        echo 'üöö Sending .env to NEW folder...'
        gcloud compute scp temp.env ${_INSTANCE_USER}@${_INSTANCE_NAME}:/home/${_INSTANCE_USER}/lom_frontend_new/.env --zone=${_ZONE}
        rm temp.env

  # ‚úÖ Step 4: Clean disk, install dependencies, and build in NEW folder
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo '‚öôÔ∏è Building project in NEW folder...'
        gcloud compute ssh ${_INSTANCE_USER}@${_INSTANCE_NAME} --zone=${_ZONE} --command="\
          echo 'üßπ Cleaning disk space...' && \
          sudo rm -rf /tmp/* && \
          sudo apt-get clean && \
          rm -rf ~/.npm/_cacache || true && \
          cd /home/${_INSTANCE_USER}/lom_frontend_new && \
          echo 'üì¶ Installing dependencies...' && \
          npm install -f && \
          echo 'üõ†Ô∏è Running production build...' && \
          npm run build"

  # Step 5: Health check on port 3001 (temp PM2 process)
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo 'üö¶ Running health check on NEW build...'
        gcloud compute ssh ${_INSTANCE_USER}@${_INSTANCE_NAME} --zone=${_ZONE} --command="\
          cd /home/${_INSTANCE_USER}/lom_frontend_new && \
          PORT=3001 pm2 start npm --name health-check-temp -- start"

        echo '‚è≥ Waiting for app to boot...'
        sleep 10

        echo 'üîç Checking health endpoint...'
        gcloud compute ssh ${_INSTANCE_USER}@${_INSTANCE_NAME} --zone=${_ZONE} --command="curl -f http://localhost:3001"
        if [ $? -ne 0 ]; then
          echo '‚ùå Health check failed. Stopping temp server and exiting.'
          gcloud compute ssh ${_INSTANCE_USER}@${_INSTANCE_NAME} --zone=${_ZONE} --command="pm2 delete health-check-temp || true"
          exit 1
        fi

        echo '‚úÖ Health check passed!'
        gcloud compute ssh ${_INSTANCE_USER}@${_INSTANCE_NAME} --zone=${_ZONE} --command="pm2 delete health-check-temp || true"

  # Step 6: Backup current LIVE folder with timestamp
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo 'üß∞ Backing up current LIVE folder...'
        gcloud compute ssh ${_INSTANCE_USER}@${_INSTANCE_NAME} --zone=${_ZONE} --command="\
          if [ -d /home/${_INSTANCE_USER}/lom_frontend_live ]; then \
            timestamp=$(date +\"%Y-%m-%d_%H-%M-%S\") && \
            mv /home/${_INSTANCE_USER}/lom_frontend_live /home/${_INSTANCE_USER}/lom_frontend_backup_\$timestamp && \
            echo '‚úÖ Backup saved as lom_frontend_backup_\$timestamp'; \
          else \
            echo '‚ÑπÔ∏è No LIVE folder to backup.'; \
          fi"

  # Step 7: Replace LIVE with NEW and restart PM2
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo 'üîÅ Swapping NEW folder with LIVE and restarting PM2...'
        gcloud compute ssh ${_INSTANCE_USER}@${_INSTANCE_NAME} --zone=${_ZONE} --command="\
          pm2 delete lom-frontend || true && \
          mv /home/${_INSTANCE_USER}/lom_frontend_new /home/${_INSTANCE_USER}/lom_frontend_live && \
          cd /home/${_INSTANCE_USER}/lom_frontend_live && \
          pm2 restart lom-frontend || PORT=3000 pm2 start npm --name lom-frontend -- start"

options:
  logging: CLOUD_LOGGING_ONLY

substitutions:
  _INSTANCE_USER: 'icreativefuel'
  _INSTANCE_NAME: 'lom-server'
  _ZONE: 'us-central1-a'
  _ENV_TYPE: 'production'

